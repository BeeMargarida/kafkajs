locksmith:
  reboot_strategy: "off"

storage:
  files:
    - path: "/etc/sysctl.d/80-swappiness.conf"
      mode: 0644
      filesystem: "root"
      contents:
        inline: "vm.swappiness=10"

    - path: "/etc/systemd/resolved.conf"
      mode: 0644
      filesystem: "root"
      contents:
        inline: |
          [Resolve]
          DNS=8.8.8.8
          FallbackDNS=8.8.4.4

    - path: "/etc/resolv.conf"
      mode: 0644
      filesystem: "root"
      contents:
        inline: |
          nameserver 8.8.8.8

systemd:
  units:
    - name: systemd-resolved.service
      enable: true

    - name: var-vm-swapfile1.swap
      contents: |
        [Unit]
        Description=Turn on swap
        Requires=create-swapfile.service
        After=create-swapfile.service

        [Swap]
        What=/var/vm/swapfile1

        [Install]
        WantedBy=multi-user.target

    - name: create-swapfile.service
      contents: |
        [Unit]
        Description=Create a swapfile
        RequiresMountsFor=/var
        ConditionPathExists=!/var/vm/swapfile1

        [Service]
        Type=oneshot
        ExecStart=/usr/bin/mkdir -p /var/vm
        ExecStart=/usr/bin/fallocate -l 4096m /var/vm/swapfile1
        ExecStart=/usr/bin/chmod 600 /var/vm/swapfile1
        ExecStart=/usr/sbin/mkswap /var/vm/swapfile1
        RemainAfterExit=true

    - name: kafkajs-demo-network.service
      enable: true
      contents: |
        [Unit]
        Description=docker network
        After=docker.service
        Requires=docker.service

        [Service]
        Type=oneshot
        RemainAfterExit=true

        ExecStart=/usr/bin/docker network create --driver=bridge kafkajs-demo
        ExecStop=/usr/bin/docker network rm kafkajs-demo

        [Install]
        WantedBy=multi-user.target

    - name: kafka.service
      enable: true
      contents: |
        [Unit]
        Description=kafka
        After=docker.service
        After=kafkajs-demo-network.service
        After=zookeeper.service
        Requires=docker.service
        Requires=zookeeper.service
        Requires=kafkajs-demo-network.service

        [Service]
        KillMode=none
        User=core
        Restart=always
        RestartSec=5min
        TimeoutSec=5min

        ExecStartPre=-/usr/bin/docker kill kafka
        ExecStartPre=-/usr/bin/docker rm kafka
        ExecStartPre=/usr/bin/docker pull wurstmeister/kafka:2.11-0.11.0.3
        ExecStart=/usr/bin/docker run \
          --rm \
          --name kafka \
          --network=kafkajs-demo \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v /home/core/server-jaas.conf:/opt/kafka/config/server-jaas.conf \
          --env KAFKA_BROKER_ID=1 \
          --env KAFKA_ADVERTISED_HOST_NAME=kafka \
          --env KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \
          --env KAFKA_AUTO_CREATE_TOPICS_ENABLE='true' \
          --env KAFKA_DELETE_TOPIC_ENABLE='true' \
          --env KAFKA_LISTENERS='PLAINTEXT://:9092' \
          --env KAFKA_ADVERTISED_LISTENERS='PLAINTEXT://kafka:9092' \
          --env KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT \
          --env KAFKA_OPTS="-Djava.security.auth.login.config=/opt/kafka/config/server-jaas.conf" \
          --env KAFKA_CREATE_TOPICS="topic-test:6:1" \
          wurstmeister/kafka:2.11-0.11.0.3
        ExecStop=/usr/bin/docker stop kafka

        [Install]
        WantedBy=multi-user.target

    - name: zookeeper.service
      enable: true
      contents: |
        [Unit]
        Description=zookeeper
        After=docker.service
        After=kafkajs-demo-network.service
        Requires=docker.service
        Requires=kafkajs-demo-network.service

        [Service]
        User=core
        TimeoutStartSec=0

        ExecStartPre=-/usr/bin/mkdir -p /var/zookeeper
        ExecStartPre=-/usr/bin/docker kill zookeeper
        ExecStartPre=-/usr/bin/docker rm zookeeper
        ExecStartPre=/usr/bin/docker pull wurstmeister/zookeeper:latest
        ExecStart=/usr/bin/docker run \
          --rm \
          --name zookeeper \
          --network=kafkajs-demo \
          --env JMX_OPTS='-Djava.security.auth.login.config=/etc/kafka/server-jaas.conf' \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v /home/core/server-jaas.conf:/opt/kafka/config/server-jaas.conf \
          wurstmeister/zookeeper:latest
        ExecStop=/usr/bin/docker stop zookeeper

        [Install]
        WantedBy=multi-user.

    - name: websockify.service
      enable: true
      contents: |
        [Unit]
        Description=websockify
        After=docker.service
        After=kafkajs-demo-network.service
        Requires=docker.service
        Requires=kafkajs-demo-network.service
        Requires=kafka.service

        [Service]
        KillMode=none
        User=core
        Restart=always
        RestartSec=5min
        TimeoutSec=5min

        ExecStartPre=-/usr/bin/docker kill websockify
        ExecStartPre=-/usr/bin/docker rm websockify
        ExecStartPre=/usr/bin/docker pull nevon/websockify:0163e4060bf88af5bd5d8e3bfae21a43a04df7ab
        ExecStart=/usr/bin/docker run \
          --rm \
          --publish 9090:80 \
          --publish 9091:443 \
          --name websockify \
          --network=kafkajs-demo \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v /home/core/tokens.conf:/opt/websockify/config/tokens.conf \
          nevon/websockify:0163e4060bf88af5bd5d8e3bfae21a43a04df7ab \
          --token-plugin=ReadOnlyTokenFile \
          --token-source=/opt/websockify/config/tokens.conf \
          80
        ExecStop=/usr/bin/docker stop websockify

        [Install]
        WantedBy=multi-user.target